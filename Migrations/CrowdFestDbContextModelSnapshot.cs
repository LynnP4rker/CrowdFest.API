// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CrowdFest.API.Migrations
{
    [DbContext(typeof(CrowdFestDbContext))]
    partial class CrowdFestDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CrowdFest.API.Entities.EventEntity", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("absentees")
                        .HasColumnType("int");

                    b.Property<int>("attendees")
                        .HasColumnType("int");

                    b.Property<int>("category")
                        .HasColumnType("int");

                    b.Property<DateOnly>("date")
                        .HasColumnType("date");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("groupId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("locationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("priority")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("themeId")
                        .HasColumnType("char(36)");

                    b.Property<TimeSpan>("time")
                        .HasColumnType("time(6)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("groupId");

                    b.HasIndex("locationId");

                    b.HasIndex("themeId");

                    b.ToTable("events");
                });

            modelBuilder.Entity("CrowdFest.API.Entities.GroupEntity", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AccessCode")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<Guid>("GroupLeaderId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsOrganisationGroup")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NameNormalised")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("RequiresApproval")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("NameNormalised")
                        .IsUnique();

                    b.ToTable("groups");
                });

            modelBuilder.Entity("CrowdFest.API.Entities.LocationEntity", b =>
                {
                    b.Property<Guid>("locationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("address1")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("address2")
                        .HasColumnType("longtext");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("county")
                        .HasColumnType("int");

                    b.Property<Guid>("plannerId")
                        .HasColumnType("char(36)");

                    b.Property<string>("postCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("locationId");

                    b.HasIndex("plannerId");

                    b.ToTable("locations");
                });

            modelBuilder.Entity("CrowdFest.API.Entities.OrganizationAccountEntity", b =>
                {
                    b.Property<Guid>("id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("GeneratedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("isVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("otp")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("organisationAccounts");
                });

            modelBuilder.Entity("CrowdFest.API.Entities.OrganizationEntity", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("emailAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("nameNormalised")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("passwordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("telephoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("organisations");
                });

            modelBuilder.Entity("CrowdFest.API.Entities.PlannerAccountEntity", b =>
                {
                    b.Property<Guid>("id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("GeneratedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Otp")
                        .HasColumnType("longtext");

                    b.Property<bool>("isVerified")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("id");

                    b.ToTable("plannerAccounts");
                });

            modelBuilder.Entity("CrowdFest.API.Entities.PlannerEntity", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("displayName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateOnly?>("dob")
                        .HasColumnType("date");

                    b.Property<string>("emailAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("firstName")
                        .HasColumnType("longtext");

                    b.Property<string>("gender")
                        .HasColumnType("longtext");

                    b.Property<string>("lastName")
                        .HasColumnType("longtext");

                    b.Property<string>("passwordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("phoneNumber")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("planners");
                });

            modelBuilder.Entity("CrowdFest.API.Entities.PlannerGroupEntity", b =>
                {
                    b.Property<Guid>("plannerId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("groupId")
                        .HasColumnType("char(36)");

                    b.HasKey("plannerId", "groupId");

                    b.HasIndex("groupId");

                    b.ToTable("plannerGroups");
                });

            modelBuilder.Entity("CrowdFest.API.Entities.PostEntity", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("plannerId")
                        .HasColumnType("char(36)");

                    b.Property<int>("rating")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("plannerId")
                        .IsUnique();

                    b.ToTable("posts");
                });

            modelBuilder.Entity("CrowdFest.API.Entities.ThemeEntity", b =>
                {
                    b.Property<Guid>("themeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("nameNormalised")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("plannerId")
                        .HasColumnType("char(36)");

                    b.HasKey("themeId");

                    b.HasIndex("nameNormalised")
                        .IsUnique();

                    b.HasIndex("plannerId");

                    b.ToTable("themes");
                });

            modelBuilder.Entity("CrowdFest.API.Entities.VoteEntity", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("eventId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("groupId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("locationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("plannerId")
                        .HasColumnType("char(36)");

                    b.Property<string>("priority")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("themeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("eventId")
                        .IsUnique();

                    b.HasIndex("groupId")
                        .IsUnique();

                    b.HasIndex("locationId")
                        .IsUnique();

                    b.HasIndex("plannerId");

                    b.HasIndex("themeId")
                        .IsUnique();

                    b.ToTable("votes");
                });

            modelBuilder.Entity("CrowdFest.API.Entities.EventEntity", b =>
                {
                    b.HasOne("CrowdFest.API.Entities.GroupEntity", null)
                        .WithMany()
                        .HasForeignKey("groupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrowdFest.API.Entities.LocationEntity", null)
                        .WithMany()
                        .HasForeignKey("locationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrowdFest.API.Entities.ThemeEntity", null)
                        .WithMany()
                        .HasForeignKey("themeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CrowdFest.API.Entities.LocationEntity", b =>
                {
                    b.HasOne("CrowdFest.API.Entities.PlannerEntity", null)
                        .WithMany()
                        .HasForeignKey("plannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CrowdFest.API.Entities.OrganizationAccountEntity", b =>
                {
                    b.HasOne("CrowdFest.API.Entities.OrganizationEntity", null)
                        .WithOne()
                        .HasForeignKey("CrowdFest.API.Entities.OrganizationAccountEntity", "id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CrowdFest.API.Entities.PlannerAccountEntity", b =>
                {
                    b.HasOne("CrowdFest.API.Entities.PlannerEntity", null)
                        .WithOne()
                        .HasForeignKey("CrowdFest.API.Entities.PlannerAccountEntity", "id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CrowdFest.API.Entities.PlannerGroupEntity", b =>
                {
                    b.HasOne("CrowdFest.API.Entities.GroupEntity", null)
                        .WithMany()
                        .HasForeignKey("groupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrowdFest.API.Entities.PlannerEntity", null)
                        .WithMany()
                        .HasForeignKey("plannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CrowdFest.API.Entities.PostEntity", b =>
                {
                    b.HasOne("CrowdFest.API.Entities.PlannerEntity", null)
                        .WithOne()
                        .HasForeignKey("CrowdFest.API.Entities.PostEntity", "plannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CrowdFest.API.Entities.ThemeEntity", b =>
                {
                    b.HasOne("CrowdFest.API.Entities.PlannerEntity", null)
                        .WithMany()
                        .HasForeignKey("plannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CrowdFest.API.Entities.VoteEntity", b =>
                {
                    b.HasOne("CrowdFest.API.Entities.EventEntity", null)
                        .WithOne()
                        .HasForeignKey("CrowdFest.API.Entities.VoteEntity", "eventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrowdFest.API.Entities.GroupEntity", null)
                        .WithOne()
                        .HasForeignKey("CrowdFest.API.Entities.VoteEntity", "groupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrowdFest.API.Entities.LocationEntity", null)
                        .WithOne()
                        .HasForeignKey("CrowdFest.API.Entities.VoteEntity", "locationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CrowdFest.API.Entities.PlannerEntity", null)
                        .WithMany()
                        .HasForeignKey("plannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrowdFest.API.Entities.ThemeEntity", null)
                        .WithOne()
                        .HasForeignKey("CrowdFest.API.Entities.VoteEntity", "themeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
